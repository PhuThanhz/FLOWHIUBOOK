import React, { useState, useEffect, useRef } from "react";
import Header from "../components/Header";
import styles from "../styles/SummaryPage.module.css";
import * as pdfjsLib from "pdfjs-dist";
import {
  Chart,
  BarController,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
} from "chart.js";

// ƒêƒÉng k√Ω c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt cho Chart.js
Chart.register(
  BarController,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

const SummaryPage = () => {
  const [selectedMethod, setSelectedMethod] = useState("extract");
  const [selectedGrade, setSelectedGrade] = useState(1);
  const [textInput, setTextInput] = useState("");
  const [summaryResult, setSummaryResult] = useState("");
  const [wordCountChart, setWordCountChart] = useState(null);
  const [keywordChart, setKeywordChart] = useState(null);
  const [sentenceLengthChart, setSentenceLengthChart] = useState(null);
  const [rougeChart, setRougeChart] = useState(null);
  const [bleuChart, setBleuChart] = useState(null);
  const [meteorChart, setMeteorChart] = useState(null);
  const [metricsChart, setMetricsChart] = useState(null);
  const [expandedChart, setExpandedChart] = useState(null); // Tr·∫°ng th√°i ƒë·ªÉ theo d√µi s∆° ƒë·ªì ƒë∆∞·ª£c ph√≥ng to

  const wordCountRef = useRef(null);
  const keywordRef = useRef(null);
  const sentenceLengthRef = useRef(null);
  const rougeRef = useRef(null);
  const bleuRef = useRef(null);
  const meteorRef = useRef(null);
  const metricsRef = useRef(null);

  pdfjsLib.GlobalWorkerOptions.workerSrc =
    "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.worker.min.js";

  const summarizeText = (text) => {
    const words = text.split(" ");
    const summaryLength = Math.floor(words.length * 0.3);
    return words.slice(0, summaryLength).join(" ") + "...";
  };

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (file && file.type === "application/pdf") {
      try {
        const fileReader = new FileReader();
        fileReader.onload = async () => {
          const typedArray = new Uint8Array(fileReader.result);
          const pdf = await pdfjsLib.getDocument(typedArray).promise;
          let fullText = "";
          for (let i = 1; i <= pdf.numPages; i++) {
            const page = await pdf.getPage(i);
            const textContent = await page.getTextContent();
            fullText +=
              textContent.items.map((item) => item.str).join(" ") + " ";
          }
          const summary = summarizeText(fullText);
          setSummaryResult(summary);
        };
        fileReader.readAsArrayBuffer(file);
      } catch (error) {
        setSummaryResult("√îi! C√≥ l·ªói khi ƒë·ªçc file PDF nha! üòÖ");
        console.error(error);
      }
    } else {
      setSummaryResult("√îi! H√£y ch·ªçn file PDF nha! üòÖ");
    }
  };

  const handleTextSubmit = () => {
    if (textInput.trim()) {
      const summary = summarizeText(textInput);
      setSummaryResult(summary);
    } else {
      setSummaryResult("Nh·∫≠p g√¨ ƒë√≥ ƒë·ªÉ t√≥m t·∫Øt nha! üòÑ");
    }
  };

  const handleReset = () => {
    setTextInput("");
    setSummaryResult("");
  };

  const generateImage = () => {
    if (summaryResult) {
      if (
        window.confirm(
          "B·∫°n mu·ªën t·∫°o h√¨nh ·∫£nh d·ª±a tr√™n n·ªôi dung t√≥m t·∫Øt v√† c√¥ng khai n√≥?"
        )
      ) {
        alert(
          "H√¨nh ·∫£nh ƒë√£ ƒë∆∞·ª£c t·∫°o v√† c√¥ng khai! (T√≠nh nƒÉng n√†y c·∫ßn t√≠ch h·ª£p API th·ª±c t·∫ø)"
        );
      }
    } else {
      alert("Vui l√≤ng t√≥m t·∫Øt tr∆∞·ªõc khi t·∫°o h√¨nh ·∫£nh!");
    }
  };

  const handleChartClick = (chartId) => {
    setExpandedChart(expandedChart === chartId ? null : chartId); // Toggle tr·∫°ng th√°i ph√≥ng to
  };

  // H√†m t·∫°o c√°c bi·ªÉu ƒë·ªì khi c√≥ k·∫øt qu·∫£
  // eslint-disable-next-line react-hooks/exhaustive-deps
  useEffect(() => {
    if (summaryResult) {
      // Destroy existing charts
      if (wordCountChart) wordCountChart.destroy();
      if (keywordChart) keywordChart.destroy();
      if (sentenceLengthChart) sentenceLengthChart.destroy();
      if (rougeChart) rougeChart.destroy();
      if (bleuChart) bleuChart.destroy();
      if (meteorChart) meteorChart.destroy();
      if (metricsChart) metricsChart.destroy();

      // Bi·ªÉu ƒë·ªì s·ªë t·ª´
      if (wordCountRef && wordCountRef.current) {
        const newWordCountChart = new Chart(wordCountRef.current, {
          type: "bar",
          data: {
            labels: ["VƒÉn b·∫£n g·ªëc", "T√≥m t·∫Øt"],
            datasets: [
              {
                label: "S·ªë t·ª´",
                data: [100, 30],
                backgroundColor: ["#1e90ff", "#32cd32"],
                borderColor: ["#1e90ff", "#32cd32"],
                borderWidth: 2
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 120,
                title: {
                  display: true,
                  text: "S·ªë t·ª´",
                  font: {
                    size: 16,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 10
                },
                ticks: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  }
                }
              },
              x: {
                title: {
                  display: true,
                  text: "Lo·∫°i vƒÉn b·∫£n",
                  font: {
                    size: 16,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 10
                },
                ticks: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 5 /* ƒêi·ªÅu ch·ªânh kho·∫£ng c√°ch gi·ªØa nh√£n v√† bi·ªÉu ƒë·ªì */
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  }
                }
              },
              tooltip: {
                titleFont: {
                  size: 14,
                  family: "'Comic Sans MS', sans-serif"
                },
                bodyFont: {
                  size: 14,
                  family: "'Comic Sans MS', sans-serif"
                }
              }
            },
            layout: {
              padding: {
                bottom: 20 /* TƒÉng kho·∫£ng c√°ch d∆∞·ªõi ƒë·ªÉ nh√£n kh√¥ng b·ªã l·ªách */
              }
            }
          }
        });
        setWordCountChart(newWordCountChart);
      }

      // Bi·ªÉu ƒë·ªì t·ª´ kh√≥a
      if (keywordRef && keywordRef.current) {
        const newKeywordChart = new Chart(keywordRef.current, {
          type: "bar",
          data: {
            labels: ["Truy·ªán", "H·ªçc", "Vui"],
            datasets: [
              {
                label: "T·∫ßn su·∫•t t·ª´ kh√≥a",
                data: [5, 4, 3],
                backgroundColor: "#ffa500",
                borderColor: "#ff8c00",
                borderWidth: 2
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 10,
                title: {
                  display: true,
                  text: "T·∫ßn su·∫•t",
                  font: {
                    size: 16,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 10
                },
                ticks: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  }
                }
              },
              x: {
                title: {
                  display: true,
                  text: "T·ª´ kh√≥a",
                  font: {
                    size: 16,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 10
                },
                ticks: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 5
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  }
                }
              },
              tooltip: {
                titleFont: {
                  size: 14,
                  family: "'Comic Sans MS', sans-serif"
                },
                bodyFont: {
                  size: 14,
                  family: "'Comic Sans MS', sans-serif"
                }
              }
            },
            layout: {
              padding: {
                bottom: 20
              }
            }
          }
        });
        setKeywordChart(newKeywordChart);
      }

      // Bi·ªÉu ƒë·ªì ƒë·ªô d√†i c√¢u
      if (sentenceLengthRef && sentenceLengthRef.current) {
        const newSentenceLengthChart = new Chart(sentenceLengthRef.current, {
          type: "bar",
          data: {
            labels: ["ƒê·ªô d√†i trung b√¨nh"],
            datasets: [
              {
                label: "S·ªë t·ª´",
                data: [5],
                backgroundColor: "#32cd32",
                borderColor: "#32cd32",
                borderWidth: 2
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 10,
                title: {
                  display: true,
                  text: "S·ªë t·ª´",
                  font: {
                    size: 16,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 10
                },
                ticks: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  }
                }
              },
              x: {
                title: {
                  display: true,
                  text: "Th√¥ng s·ªë",
                  font: {
                    size: 16,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 10
                },
                ticks: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 5
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  }
                }
              },
              tooltip: {
                titleFont: {
                  size: 14,
                  family: "'Comic Sans MS', sans-serif"
                },
                bodyFont: {
                  size: 14,
                  family: "'Comic Sans MS', sans-serif"
                }
              }
            },
            layout: {
              padding: {
                bottom: 20
              }
            }
          }
        });
        setSentenceLengthChart(newSentenceLengthChart);
      }

      // Bi·ªÉu ƒë·ªì ROUGE
      if (rougeRef && rougeRef.current) {
        const newRougeChart = new Chart(rougeRef.current, {
          type: "bar",
          data: {
            labels: ["ROUGE-1", "ROUGE-2", "ROUGE-L"],
            datasets: [
              {
                label: "ƒêi·ªÉm ROUGE",
                data: [0.75, 0.55, 0.7],
                backgroundColor: "#1e90ff",
                borderColor: "#1e90ff",
                borderWidth: 2
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 1,
                title: {
                  display: true,
                  text: "ƒêi·ªÉm s·ªë",
                  font: {
                    size: 16,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 10
                },
                ticks: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  }
                }
              },
              x: {
                title: {
                  display: true,
                  text: "Ch·ªâ s·ªë ROUGE",
                  font: {
                    size: 16,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 10
                },
                ticks: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 5
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  }
                }
              },
              tooltip: {
                titleFont: {
                  size: 14,
                  family: "'Comic Sans MS', sans-serif"
                },
                bodyFont: {
                  size: 14,
                  family: "'Comic Sans MS', sans-serif"
                }
              }
            },
            layout: {
              padding: {
                bottom: 20
              }
            }
          }
        });
        setRougeChart(newRougeChart);
      }

      // Bi·ªÉu ƒë·ªì BLEU
      if (bleuRef && bleuRef.current) {
        const newBleuChart = new Chart(bleuRef.current, {
          type: "bar",
          data: {
            labels: ["Ch·ªâ s·ªë BLEU"],
            datasets: [
              {
                label: "ƒêi·ªÉm BLEU",
                data: [0.65],
                backgroundColor: "#ff69b4",
                borderColor: "#ff69b4",
                borderWidth: 2
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 1,
                title: {
                  display: true,
                  text: "ƒêi·ªÉm s·ªë",
                  font: {
                    size: 16,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 10
                },
                ticks: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  }
                }
              },
              x: {
                title: {
                  display: true,
                  text: "Ch·ªâ s·ªë BLEU",
                  font: {
                    size: 16,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 10
                },
                ticks: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 5
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  }
                }
              },
              tooltip: {
                titleFont: {
                  size: 14,
                  family: "'Comic Sans MS', sans-serif"
                },
                bodyFont: {
                  size: 14,
                  family: "'Comic Sans MS', sans-serif"
                }
              }
            },
            layout: {
              padding: {
                bottom: 20
              }
            }
          }
        });
        setBleuChart(newBleuChart);
      }

      // Bi·ªÉu ƒë·ªì METEOR
      if (meteorRef && meteorRef.current) {
        const newMeteorChart = new Chart(meteorRef.current, {
          type: "bar",
          data: {
            labels: ["METEOR"],
            datasets: [
              {
                label: "ƒêi·ªÉm METEOR",
                data: [0.7],
                backgroundColor: "#1e90ff",
                borderColor: "#1e90ff",
                borderWidth: 2
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 1,
                title: {
                  display: true,
                  text: "ƒêi·ªÉm s·ªë",
                  font: {
                    size: 16,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 10
                },
                ticks: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  }
                }
              },
              x: {
                title: {
                  display: true,
                  text: "Ch·ªâ s·ªë METEOR",
                  font: {
                    size: 16,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 10
                },
                ticks: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 5
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  }
                }
              },
              tooltip: {
                titleFont: {
                  size: 14,
                  family: "'Comic Sans MS', sans-serif"
                },
                bodyFont: {
                  size: 14,
                  family: "'Comic Sans MS', sans-serif"
                }
              }
            },
            layout: {
              padding: {
                bottom: 20
              }
            }
          }
        });
        setMeteorChart(newMeteorChart);
      }

      // Bi·ªÉu ƒë·ªì ch·ªâ s·ªë b·ªï sung
      if (metricsRef && metricsRef.current) {
        const newMetricsChart = new Chart(metricsRef.current, {
          type: "bar",
          data: {
            labels: ["D·ªÖ ƒë·ªçc", "Ch√≠nh x√°c"],
            datasets: [
              {
                label: "Ph·∫ßn trƒÉm",
                data: [80, 90],
                backgroundColor: ["#40e0d0", "#dda0dd"],
                borderColor: ["#40e0d0", "#dda0dd"],
                borderWidth: 2
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                max: 100,
                title: {
                  display: true,
                  text: "Ph·∫ßn trƒÉm (%)",
                  font: {
                    size: 16,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 10
                },
                ticks: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  }
                }
              },
              x: {
                title: {
                  display: true,
                  text: "Ch·ªâ s·ªë",
                  font: {
                    size: 16,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 10
                },
                ticks: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  },
                  padding: 5
                }
              }
            },
            plugins: {
              legend: {
                labels: {
                  font: {
                    size: 14,
                    family: "'Comic Sans MS', sans-serif"
                  }
                }
              },
              tooltip: {
                titleFont: {
                  size: 14,
                  family: "'Comic Sans MS', sans-serif"
                },
                bodyFont: {
                  size: 14,
                  family: "'Comic Sans MS', sans-serif"
                }
              }
            },
            layout: {
              padding: {
                bottom: 20
              }
            }
          }
        });
        setMetricsChart(newMetricsChart);
      }
    }
  }, [summaryResult]);

  return (
    <div className={styles.container}>
      <Header />
      <main className={styles.mainContent}>
        <div className={styles.headerContainer}>
          {/* Sidebar for Options */}
          <div className={styles.optionColumn}>
            <div className={styles.optionSection}>
              <h3 className={styles.optionTitle}>Ch·ªçn ki·ªÉu t√≥m t·∫Øt üåü</h3>
              <div className={styles.optionGroup}>
                <button
                  className={`${styles.optionButton} ${styles.methodExtract} ${
                    selectedMethod === "extract" ? styles.active : ""
                  }`}
                  onClick={() => setSelectedMethod("extract")}
                  data-tooltip="Nh·∫•n ƒë·ªÉ Tr√≠ch xu·∫•t vƒÉn b·∫£n! üåä"
                >
                  <span className={styles.buttonIcon}>üåä</span> Tr√≠ch xu·∫•t
                </button>
                <button
                  className={`${styles.optionButton} ${
                    styles.methodParaphrase
                  } ${selectedMethod === "paraphrase" ? styles.active : ""}`}
                  onClick={() => setSelectedMethod("paraphrase")}
                  data-tooltip="Nh·∫•n ƒë·ªÉ Di·ªÖn gi·∫£i vƒÉn b·∫£n! üå¥"
                >
                  <span className={styles.buttonIcon}>üå¥</span> Di·ªÖn gi·∫£i
                </button>
              </div>
            </div>
            <div className={styles.optionSection}>
              <h3 className={styles.optionTitle}>Ch·ªçn l·ªõp h·ªçc üêæ</h3>
              <div className={styles.optionGroup}>
                <button
                  className={`${styles.optionButton} ${styles.grade1} ${
                    selectedGrade === 1 ? styles.active : ""
                  }`}
                  onClick={() => setSelectedGrade(1)}
                  data-tooltip="Ch·ªçn L·ªõp 1 nh√©! üê±"
                >
                  <span className={styles.buttonIcon}>üê±</span> L·ªõp 1
                </button>
                <button
                  className={`${styles.optionButton} ${styles.grade2} ${
                    selectedGrade === 2 ? styles.active : ""
                  }`}
                  onClick={() => setSelectedGrade(2)}
                  data-tooltip="Ch·ªçn L·ªõp 2 nh√©! üê∂"
                >
                  <span className={styles.buttonIcon}>üê∂</span> L·ªõp 2
                </button>
                <button
                  className={`${styles.optionButton} ${styles.grade3} ${
                    selectedGrade === 3 ? styles.active : ""
                  }`}
                  onClick={() => setSelectedGrade(3)}
                  data-tooltip="Ch·ªçn L·ªõp 3 nh√©! üê∞"
                >
                  <span className={styles.buttonIcon}>üê∞</span> L·ªõp 3
                </button>
                <button
                  className={`${styles.optionButton} ${styles.grade4} ${
                    selectedGrade === 4 ? styles.active : ""
                  }`}
                  onClick={() => setSelectedGrade(4)}
                  data-tooltip="Ch·ªçn L·ªõp 4 nh√©! üêπ"
                >
                  <span className={styles.buttonIcon}>üêπ</span> L·ªõp 4
                </button>
                <button
                  className={`${styles.optionButton} ${styles.grade5} ${
                    selectedGrade === 5 ? styles.active : ""
                  }`}
                  onClick={() => setSelectedGrade(5)}
                  data-tooltip="Ch·ªçn L·ªõp 5 nh√©! üê∏"
                >
                  <span className={styles.buttonIcon}>üê∏</span> L·ªõp 5
                </button>
              </div>
            </div>
          </div>
        </div>

        <div className={styles.inputResultSection}>
          <div className={styles.inputResultContainer}>
            <div className={styles.textInputContainer}>
              <div className={styles.inputWrapper}>
                <div className={styles.textInputArea}>
                  <h3 className={styles.sectionTitle}>
                    Nh·∫≠p vƒÉn b·∫£n mu·ªën t√≥m t·∫Øt nha! üòÑ
                  </h3>
                  <textarea
                    className={styles.textArea}
                    value={textInput}
                    onChange={(e) => setTextInput(e.target.value)}
                    placeholder="Nh·∫≠p vƒÉn b·∫£n mu·ªën t√≥m t·∫Øt nha! üòÑ"
                  />
                </div>
              </div>
              <div className={styles.buttonRow}>
                <button
                  className={styles.submitButton}
                  onClick={() => {
                    handleTextSubmit();
                    generateImage();
                  }}
                  disabled={!textInput.trim()}
                >
                  <span className={styles.buttonIcon}>üåà</span> T√≥m t·∫Øt n√†o!
                </button>
                <label htmlFor="file-upload" className={styles.uploadButton}>
                  <span className={styles.buttonIcon}>üìÑ</span> T·∫£i PDF
                  <input
                    type="file"
                    id="file-upload"
                    className={styles.fileInput}
                    onChange={(e) => {
                      handleFileUpload(e);
                      generateImage();
                    }}
                    accept=".pdf"
                  />
                </label>
                <button className={styles.resetButton} onClick={handleReset}>
                  <span className={styles.buttonIcon}>üßπ</span> X√≥a h·∫øt
                </button>
              </div>
              {summaryResult && (
                <button
                  className={styles.generateImageButton}
                  onClick={generateImage}
                >
                  T·∫°o v√† c√¥ng khai h√¨nh ·∫£nh
                </button>
              )}
            </div>

            <div className={styles.resultContainer}>
              <h3 className={styles.sectionTitle}>
                K·∫øt qu·∫£ t√≥m t·∫Øt ƒë√¢y nha! üéâ
              </h3>
              <div className={styles.resultBox}>
                <p className={styles.resultText}>
                  {summaryResult || "Ch∆∞a c√≥ k·∫øt qu·∫£! T√≥m t·∫Øt ƒë·ªÉ xem nha! üòä"}
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Evaluation Section */}
        <section className={styles.evaluationSection}>
          <h2 className={styles.evaluationTitle}>
            Bi·ªÉu ƒë·ªì ch·ªâ s·ªë ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng t√≥m t·∫Øt üéØ
          </h2>
          <div className={styles.evaluationContainer}>
            <div
              className={`${styles.evaluationItem} ${
                expandedChart === "wordCount" ? styles.expanded : ""
              }`}
              onClick={() => handleChartClick("wordCount")}
            >
              <p>S·ªë t·ª´ (gi·∫£ l·∫≠p: VƒÉn b·∫£n g·ªëc: 100 t·ª´, T√≥m t·∫Øt: 30 t·ª´) üìä</p>
              <canvas ref={wordCountRef} id="wordCountChart"></canvas>
            </div>
            <div
              className={`${styles.evaluationItem} ${
                expandedChart === "keyword" ? styles.expanded : ""
              }`}
              onClick={() => handleChartClick("keyword")}
            >
              <p>T·ª´ kh√≥a n·ªïi b·∫≠t (gi·∫£ l·∫≠p: Truy·ªán, H·ªçc, Vui) üîë</p>
              <canvas ref={keywordRef} id="keywordChart"></canvas>
            </div>
            <div
              className={`${styles.evaluationItem} ${
                expandedChart === "sentenceLength" ? styles.expanded : ""
              }`}
              onClick={() => handleChartClick("sentenceLength")}
            >
              <p>ƒê·ªô d√†i c√¢u trung b√¨nh (gi·∫£ l·∫≠p: 5 t·ª´) üìà</p>
              <canvas ref={sentenceLengthRef} id="sentenceLengthChart"></canvas>
            </div>
            <div
              className={`${styles.evaluationItem} ${
                expandedChart === "rouge" ? styles.expanded : ""
              }`}
              onClick={() => handleChartClick("rouge")}
            >
              <p>
                ƒê·ªì th·ªã ROUGE (gi·∫£ l·∫≠p: ROUGE-1: 0.75, ROUGE-2: 0.55, ROUGE-L:
                0.7) üìä
              </p>
              <canvas ref={rougeRef} id="rougeChart"></canvas>
            </div>
            <div
              className={`${styles.evaluationItem} ${
                expandedChart === "bleu" ? styles.expanded : ""
              }`}
              onClick={() => handleChartClick("bleu")}
            >
              <p>ƒê·ªì th·ªã BLEU (gi·∫£ l·∫≠p: BLEU: 0.65) üìâ</p>
              <canvas ref={bleuRef} id="bleuChart"></canvas>
            </div>
            <div
              className={`${styles.evaluationItem} ${
                expandedChart === "meteor" ? styles.expanded : ""
              }`}
              onClick={() => handleChartClick("meteor")}
            >
              <p>ƒê·ªì th·ªã METEOR (gi·∫£ l·∫≠p: METEOR: 0.70) üìâ</p>
              <canvas ref={meteorRef} id="meteorChart"></canvas>
            </div>
            <div
              className={`${styles.evaluationItem} ${
                expandedChart === "metrics" ? styles.expanded : ""
              }`}
              onClick={() => handleChartClick("metrics")}
            >
              <p>Ch·ªâ s·ªë b·ªï sung (gi·∫£ l·∫≠p: D·ªÖ ƒë·ªçc: 80%, Ch√≠nh x√°c: 90%) üìã</p>
              <canvas ref={metricsRef} id="metricsChart"></canvas>
            </div>
          </div>
        </section>
      </main>
    </div>
  );
};

export default SummaryPage;
